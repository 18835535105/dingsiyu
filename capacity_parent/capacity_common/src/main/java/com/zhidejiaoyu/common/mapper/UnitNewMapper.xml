<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhidejiaoyu.common.mapper.UnitNewMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.UnitNew">
        <id column="id" property="id"/>
        <result column="course_id" property="courseId"/>
        <result column="unit_name" property="unitName"/>
        <result column="joint_name" property="jointName"/>
        <result column="delStatus" property="delStatus"/>
        <result column="unit_index" property="unitIndex"/>
    </resultMap>

    <sql id="base_sql">
        id, course_id, unit_name, joint_name, delStatus,  unit_index
    </sql>

    <sql id="more_table_sql">
        un.id, un.course_id, un.unit_name, un.joint_name, un.delStatus,  un.unit_index
    </sql>

    <select id="selectByGradeListAndVersionAndGrade" resultType="java.lang.Long">
        select distinct(u.id)
        from course_new c, unit_new u
        where c.id = u.course_id
        and c.version = #{version}
        and c.grade in (
        <foreach collection="gradeList" item="grade" separator=",">
            #{grade}
        </foreach>)
    </select>
    <select id="selectMapByGradeListAndVersionAndGrade" resultType="map" parameterType="map">
        select distinct(u.id) unitId,c.id courseId
        from course_new c, unit_new u
        where c.id = u.course_id
        and c.version = #{version}
        and c.grade in (
        <foreach collection="gradeList" item="grade" separator=",">
            #{grade}
        </foreach>)
    </select>
    <select id="selectLessOrEqualsCurrentIdByCourseIdAndUnitId" resultType="java.lang.Long" parameterType="map">
        select distinct(id)
        from unit_new
        where course_id = #{courseId}
          and id &lt;= #{unitId}
    </select>
    <select id="selectMapLessOrEqualsCurrentIdByCourseIdAndUnitId" resultType="map" parameterType="map">
        select distinct(id) unitId, course_id courseId
        from unit_new
        where course_id = #{courseId}
          and id &lt;= #{unitId}
    </select>
    <select id="selectByIds" parameterType="map" resultType="map">
        select
        u.id unitId,cn.grade grade,cn.grade_ext gradeStr,
        cn.label label,cn.label_ext labelStr, cn.id courseId
        from unit_new u
        join course_new cn on u.course_id=cn.id
        where u.id in (
        <foreach collection="unitIds" separator="," item="unitId">
            #{unitId}
        </foreach>
        )
    </select>
    <select id="selectIdsByCourseNames" resultType="java.lang.Long" parameterType="map">
        select distinct (u.id)
        from unit_new u, course_new c
        where u.course_id = c.id
        and c.course_name in (
        <foreach collection="courseNames" item="courseName" separator=",">
            #{courseName}
        </foreach>
        )
    </select>
    <select id="selectIdsMapByCourseNames" resultType="map" parameterType="map">
        select distinct (u.id) unitId,c.id courseId
        from unit_new u, course_new c
        where u.course_id = c.id
        and c.course_name in (
        <foreach collection="courseNames" item="courseName" separator=",">
            #{courseName}
        </foreach>
        )
    </select>
    <select id="selectCountByUnitIds" resultType="map" parameterType="map">
        select new.id unitId,
        (select count(voc.id) from unit_vocabulary_new voc where voc.unit_id=new.id )+
        (select count(sen.id) from unit_sentence_new sen where sen.unit_id=new.id)+
        (select count(teks.id) from unit_teks_new teks where teks.unit_id=new.id) count
        from unit_new new where id in (
        <foreach collection="unitIds" separator="," item="unitId">
            #{unitId}
        </foreach>
        )
    </select>
    <select id="selectByUnitIdAndCourseId" resultType="int" parameterType="map">
        select count(id)
        from unit_new
        where course_id = #{courseId}
          and id &lt; #{unitId}
    </select>
    <select id="selectIdAndNameByCourseId" resultType="com.zhidejiaoyu.common.vo.course.UnitStudyStateVO"
            parameterType="map">
        select u.id unitId, u.unit_name unitName from unit_new u
        <if test="type == 1">
            join unit_vocabulary_new uvn on uvn.unit_id = u.id
        </if>
        <if test="type == 2">
            join unit_sentence_new usn on usn.unit_id = u.id
        </if>

        <if test="type == 3">
            join syntax_unit_topic_new usn on usn.unit_id = u.id
        </if>

        <if test="type == 4">
            join unit_teks_new utn on utn.unit_id = u.id
        </if>

        <if test="type == 5">
            join unit_test_store uts on u.id = uts.unit_id
        </if>
        where u.course_id = #{courseId}
        group by u.id
        order by u.id
    </select>
    <select id="selectSyntaxMaxUnitByCourseId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="more_table_sql"/>
        from unit_new un, syntax_unit_topic_new sutn
        where un.id = sutn.unit_id
        order by un.id desc
        limit 1
    </select>
    <select id="selectMaxUnitIdByUnitId" resultType="java.lang.Long" parameterType="map">
        select Max(id)
        from unit_new
        where course_id = (select course_id from unit_new where id = #{unitId} limit 1)
    </select>
    <select id="selectSyntaxUnitLikeJointName" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="more_table_sql"/>
        from unit_new un, syntax_unit_topic_new sutn
        where un.id = sutn.unit_id
        and un.joint_name like concat('%', #{jointName}, '%')
        group by un.id
    </select>
    <select id="selectNextSyntaxUnitByCourseId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="more_table_sql"/>
        from unit_new un, syntax_unit_topic_new sutn
        where un.id = sutn.unit_id and un.course_id = #{courseId}
        and un.id > #{unitId}
        order by un.id desc
        limit 1
    </select>
    <select id="selectUnitNameByUnitIds" resultType="java.util.Map" parameterType="map">
        select id unitId, joint_name unitName ,unit_name `name`
        from unit_new
        where id in (
        <foreach collection="unitIds" separator="," item="unitId">
            #{unitId}
        </foreach>
        )
        group by id
    </select>

    <select id="selectMaxGroupByUnitIsdAndType" resultType="java.util.Map" parameterType="map">
        select unit_id unitId, max(`group`) `group` from
        <if test="type == 1">
            unit_vocabulary_new
        </if>
        <if test="type == 2">
            unit_sentence_new
        </if>
        <if test="type == 4">
            unit_teks_new
        </if>
        where unit_id in (
        <foreach collection="unitIds" separator="," item="unitId">
            #{unitId}
        </foreach>
        )
        group by unit_id
    </select>
    <select id="selectByCourseIds" parameterType="map" resultMap="BaseResultMap">
        select
        <include refid="base_sql"></include>
        from unit_new
        where
        course_id in (
        <foreach collection="courseIds" separator="," item="courseId">
            #{courseId}
        </foreach>
        )
        order by id asc
    </select>
    <select id="selectFirstByUnitId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select <include refid="base_sql"></include> from unit_new where course_id = #{courseId} order by id asc limit 1
        ;
    </select>
    <select id="selectByExample" resultType="java.util.Map" parameterType="com.zhidejiaoyu.common.pojo.UnitOneExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_ListUnit"/>
        from unit_new unit
        join course_new course
        on unit.course_id=course.id
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_ListUnit">
        unit.id id, unit.course_id courseId, unit.unit_name unitName, unit.joint_name jointName,course.version version
    </sql>
</mapper>
