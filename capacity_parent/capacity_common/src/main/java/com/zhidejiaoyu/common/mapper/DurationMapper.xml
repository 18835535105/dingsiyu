<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhidejiaoyu.common.mapper.DurationMapper">
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.Duration">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="student_id" property="studentId" jdbcType="BIGINT"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="unit_id" property="unitId" jdbcType="BIGINT"/>
        <result column="valid_time" property="validTime" jdbcType="BIGINT"/>
        <result column="online_time" property="onlineTime" jdbcType="BIGINT"/>
        <result column="login_time" property="loginTime" jdbcType="TIMESTAMP"/>
        <result column="login_out_time" property="loginOutTime" jdbcType="TIMESTAMP"/>
        <result column="study_model" property="studyModel" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, student_id, course_id, unit_id, valid_time, online_time, login_time, login_out_time,
        study_model
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.zhidejiaoyu.common.pojo.DurationExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from duration
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from duration
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from duration
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample" parameterType="com.zhidejiaoyu.common.pojo.DurationExample">
        delete from duration
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.zhidejiaoyu.common.pojo.Duration" useGeneratedKeys="true" keyProperty="id">
        insert into duration (id, student_id, course_id,
                              unit_id, valid_time, online_time,
                              login_time, login_out_time, study_model
        )
        values (#{id,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, #{courseId,jdbcType=BIGINT},
                #{unitId,jdbcType=BIGINT}, #{validTime,jdbcType=BIGINT}, #{onlineTime,jdbcType=BIGINT},
                #{loginTime,jdbcType=TIMESTAMP}, #{loginOutTime,jdbcType=TIMESTAMP}, #{studyModel,jdbcType=INTEGER}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.zhidejiaoyu.common.pojo.Duration" useGeneratedKeys="true" keyProperty="id">
        insert into duration
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="studentId != null">
                student_id,
            </if>
            <if test="courseId != null">
                course_id,
            </if>
            <if test="unitId != null">
                unit_id,
            </if>
            <if test="validTime != null">
                valid_time,
            </if>
            <if test="onlineTime != null">
                online_time,
            </if>
            <if test="loginTime != null">
                login_time,
            </if>
            <if test="loginOutTime != null">
                login_out_time,
            </if>
            <if test="studyModel != null">
                study_model,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="studentId != null">
                #{studentId,jdbcType=BIGINT},
            </if>
            <if test="courseId != null">
                #{courseId,jdbcType=BIGINT},
            </if>
            <if test="unitId != null">
                #{unitId,jdbcType=BIGINT},
            </if>
            <if test="validTime != null">
                #{validTime,jdbcType=BIGINT},
            </if>
            <if test="onlineTime != null">
                #{onlineTime,jdbcType=BIGINT},
            </if>
            <if test="loginTime != null">
                #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="loginOutTime != null">
                #{loginOutTime,jdbcType=TIMESTAMP},
            </if>
            <if test="studyModel != null">
                #{studyModel,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.zhidejiaoyu.common.pojo.DurationExample"
            resultType="java.lang.Integer">
        select count(*) from duration
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countTotalValidTimeMapByCourseId" resultType="java.util.Map" parameterType="map">
        SELECT
        course_id id,
        sum(valid_time) value
        FROM
        duration
        WHERE
        student_id = #{stuId}
        AND course_id in (
        <foreach collection="courses" item="course" separator=",">
            #{course.id}
        </foreach>
        )
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update duration
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.studentId != null">
                student_id = #{record.studentId,jdbcType=BIGINT},
            </if>
            <if test="record.courseId != null">
                course_id = #{record.courseId,jdbcType=BIGINT},
            </if>
            <if test="record.unitId != null">
                unit_id = #{record.unitId,jdbcType=BIGINT},
            </if>
            <if test="record.validTime != null">
                valid_time = #{record.validTime,jdbcType=BIGINT},
            </if>
            <if test="record.onlineTime != null">
                online_time = #{record.onlineTime,jdbcType=BIGINT},
            </if>
            <if test="record.loginTime != null">
                login_time = #{record.loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.loginOutTime != null">
                login_out_time = #{record.loginOutTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.studyModel != null">
                study_model = #{record.studyModel,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update duration
        set id = #{record.id,jdbcType=BIGINT},
        student_id = #{record.studentId,jdbcType=BIGINT},
        course_id = #{record.courseId,jdbcType=BIGINT},
        unit_id = #{record.unitId,jdbcType=BIGINT},
        valid_time = #{record.validTime,jdbcType=BIGINT},
        online_time = #{record.onlineTime,jdbcType=BIGINT},
        login_time = #{record.loginTime,jdbcType=TIMESTAMP},
        login_out_time = #{record.loginOutTime,jdbcType=TIMESTAMP},
        study_model = #{record.studyModel,jdbcType=INTEGER}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.zhidejiaoyu.common.pojo.Duration">
        update duration
        <set>
            <if test="studentId != null">
                student_id = #{studentId,jdbcType=BIGINT},
            </if>
            <if test="courseId != null">
                course_id = #{courseId,jdbcType=BIGINT},
            </if>
            <if test="unitId != null">
                unit_id = #{unitId,jdbcType=BIGINT},
            </if>
            <if test="validTime != null">
                valid_time = #{validTime,jdbcType=BIGINT},
            </if>
            <if test="onlineTime != null">
                online_time = #{onlineTime,jdbcType=BIGINT},
            </if>
            <if test="loginTime != null">
                login_time = #{loginTime,jdbcType=TIMESTAMP},
            </if>
            <if test="loginOutTime != null">
                login_out_time = #{loginOutTime,jdbcType=TIMESTAMP},
            </if>
            <if test="studyModel != null">
                study_model = #{studyModel,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zhidejiaoyu.common.pojo.Duration">
        update duration
        set student_id     = #{studentId,jdbcType=BIGINT},
            course_id      = #{courseId,jdbcType=BIGINT},
            unit_id        = #{unitId,jdbcType=BIGINT},
            valid_time     = #{validTime,jdbcType=BIGINT},
            online_time    = #{onlineTime,jdbcType=BIGINT},
            login_time     = #{loginTime,jdbcType=TIMESTAMP},
            login_out_time = #{loginOutTime,jdbcType=TIMESTAMP},
            study_model    = #{studyModel,jdbcType=INTEGER}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="valid_timeIndex" parameterType="map" resultType="integer">
        select SUM(valid_time) from duration where unit_id = #{unit_id} and student_id =#{student_id}
        <if test="model == 0">
            and study_model = 0
        </if>
        <if test="model == 1">
            and study_model = 1
        </if>
        <if test="model == 2">
            and study_model = 2
        </if>
        <if test="model == 3">
            and study_model = 3
        </if>
        <if test="model == 4">
            and study_model = 4
        </if>
        <if test="model == 5">
            and study_model = 5
        </if>
        <if test="model == 6">
            and study_model = 6
        </if>
        <!-- and study_model = '慧记忆' -->
    </select>
    <select id="selectValidTimeAndOnlineTime" resultType="java.util.Map" parameterType="map">
        SELECT
            valid_time validTime,
            (
                TO_SECONDS(login_out_time) - TO_SECONDS(login_time)
            )          onlineTime
        FROM
            duration
        WHERE
            student_id = #{student.id}
        GROUP BY
            login_time;

    </select>
    <select id="planSeniority" resultType="com.zhidejiaoyu.common.Vo.SeniorityVo">
        <!--
        select a.student_id, SUM(a.valid_time) AS learnDate from (select student_id, course_id, SUM(valid_time) AS valid_time FROM duration GROUP BY student_id, course_id) a JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND b.area = #{area} AND b.school_name = #{school_name} AND b.grade = #{grade} AND b.squad = #{squad}  &#45;&#45; AND b.id = 3169
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY learnDate <if test="haveTime == 1">ASC</if> <if test="haveTime == 2">DESC</if>
        -->

        SELECT
        a.student_id,
        SUM(a.valid_time) AS learnDate,
        a.student_name,
        a.squad,
        a.school_name
        FROM
        (
        SELECT
        u.student_id,
        u.course_id,
        SUM(u.valid_time) AS valid_time,
        s.student_name,
        s.squad,
        s.school_name
        FROM
        duration u, student s WHERE u.student_id = s.id
        GROUP BY
        u.student_id,
        u.course_id
        ) a
        JOIN student b ON a.student_id = b.id
        JOIN course c ON a.course_id = c.id
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version}
        AND b.grade = #{grade} AND b.class_id = #{classId}
        GROUP BY
        a.student_id
        ORDER BY
        learnDate DESC
    </select>
    <select id="planSenioritySchool" resultType="com.zhidejiaoyu.common.Vo.SeniorityVo">
        <!--
        select a.student_id, SUM(a.valid_time) AS learnDate from (select student_id, course_id, SUM(valid_time) AS valid_time FROM duration GROUP BY student_id, course_id) a JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND b.area = #{area} AND b.school_name = #{school_name}  &#45;&#45; AND b.id = 3169
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY learnDate <if test="haveTime == 1">ASC</if> <if test="haveTime == 2">DESC</if> LIMIT 50;
        -->

        SELECT
        a.student_id,
        SUM(a.valid_time) AS learnDate,
        a.student_name,
        a.squad,
        a.school_name
        FROM
        (
        SELECT
        u.student_id,
        u.course_id,
        SUM(u.valid_time) AS valid_time,
        s.student_name,
        s.squad,
        s.school_name
        FROM
        duration u, student s WHERE u.student_id = s.id
        GROUP BY
        u.student_id,
        u.course_id
        ) a
        JOIN student b ON a.student_id = b.id
        JOIN course c ON a.course_id = c.id
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version}
		AND b.teacher_id = #{teacherId}
        GROUP BY
        a.student_id
        ORDER BY
        learnDate DESC
        LIMIT 50;
    </select>
    <select id="planSeniorityNationwide" resultType="com.zhidejiaoyu.common.Vo.SeniorityVo">
        <!--
        select a.student_id, SUM(a.valid_time) AS learnDate from (select student_id, course_id, SUM(valid_time) AS valid_time FROM duration GROUP BY student_id, course_id) a JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY learnDate <if test="haveTime == 1">ASC</if> <if test="haveTime == 2">DESC</if> LIMIT 50;
        -->

        SELECT
        a.student_id,
        SUM(a.valid_time) AS learnDate,
        a.student_name,
        a.squad,
        a.school_name
        FROM
        (
        SELECT
        u.student_id,
        u.course_id,
        SUM(u.valid_time) AS valid_time,
        s.student_name,
        s.squad,
        s.school_name
        FROM
        duration u, student s WHERE u.student_id = s.id
        GROUP BY
        u.student_id,
        u.course_id
        ) a
        JOIN student b ON a.student_id = b.id
        JOIN course c ON a.course_id = c.id
        AND c.study_paragraph = #{study_paragraph}
        AND c.version = #{version}
        GROUP BY
        a.student_id
        ORDER BY
        learnDate DESC
        LIMIT 50;
    </select>
    <select id="selectStudyEfficiency" resultType="java.lang.Double" parameterType="map">
        SELECT SUM(valid_time) / SUM(online_time)
        FROM duration
        WHERE login_time &gt;= #{studentWorkDay.workDayBegin}
          AND login_time &lt;= #{studentWorkDay.workDayEnd}
          AND student_id = #{studentWorkDay.studentId}
    </select>
    <select id="selectValidTime" resultType="java.lang.Integer" parameterType="map">
        select SUM(valid_time) from duration
        <where>
            <if test="beginTime != null and beginTime != ''">
                and login_time &gt; #{beginTime}
            </if>
            <if test="endTime != null and endTime != ''">
                and login_time &lt; #{endTime}
            </if>
            and student_id = #{studentId}
        </where>


    </select>
    <select id="selectOnlineTime" resultType="java.lang.Integer" parameterType="map">
        select SUM(online_time) from duration
        <where>
            <if test="beginTime != null and beginTime != ''">
                and login_time &gt; #{beginTime}
            </if>
            <if test="endTime != null and endTime != ''">
                and login_time &lt; #{endTime}
            </if>
            and student_id = #{studentId}
        </where>
    </select>
    <select id="selectLastLoginDuration" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from duration where student_id = #{studentId} and online_time &lt;&gt; 0 order by id
        desc limit 1
    </select>

    <select id="countOnlineTimeWithLoginTime" resultType="java.lang.Integer" parameterType="map">
        select count(id)
        from duration
        where student_id = #{student.id}
          and login_time = #{loginTime}
          and online_time &lt;> 0
    </select>
</mapper>