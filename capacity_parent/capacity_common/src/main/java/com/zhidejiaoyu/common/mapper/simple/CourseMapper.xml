<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhidejiaoyu.common.mapper.simple.CourseMapper">
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.Course">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="study_paragraph" property="studyParagraph" jdbcType="VARCHAR"/>
        <result column="grade" property="grade" jdbcType="VARCHAR"/>
        <result column="version" property="version" jdbcType="VARCHAR"/>
        <result column="label" property="label" jdbcType="VARCHAR"/>
        <result column="picture_name" property="pictureName" jdbcType="VARCHAR"/>
        <result column="picture_url" property="pictureUrl" jdbcType="VARCHAR"/>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="insertcourse">
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="studyParagraph != null">
                study_paragraph,
            </if>
            <if test="grade != null">
                grade,
            </if>
            <if test="version != null">
                version,
            </if>
            <if test="label != null">
                label,
            </if>
            <if test="pictureName != null">
                picture_name,
            </if>
            <if test="pictureUrl != null">
                picture_url,
            </if>
            <if test="courseName != null">
                course_name,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="studyParagraph != null">
                #{studyParagraph,jdbcType=VARCHAR},
            </if>
            <if test="grade != null">
                #{grade,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                #{version,jdbcType=VARCHAR},
            </if>
            <if test="label != null">
                #{label,jdbcType=VARCHAR},
            </if>
            <if test="pictureName != null">
                #{pictureName,jdbcType=VARCHAR},
            </if>
            <if test="pictureUrl != null">
                #{pictureUrl,jdbcType=VARCHAR},
            </if>
            <if test="courseName != null">
                #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </sql>

    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria"
                     separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem"
                                             open="(" close=")" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria"
                     separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and
                                    #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem"
                                             open="(" close=")" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, study_paragraph, grade, version, label, picture_name, picture_url,
        course_name,
        status, create_time, update_time
    </sql>
    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.zhidejiaoyu.common.pojo.CourseExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>

    <select id="selectCourseByIds" parameterType="java.util.List"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from course c where id in
        <foreach collection="ids" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>

        and delStatus=1 and `status` = 1
    </select>


    <select id="selectByPrimaryKey" resultMap="BaseResultMap"
            parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from course
        where id = #{id,jdbcType=BIGINT}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete from course
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <delete id="deleteByExample"
            parameterType="com.zhidejiaoyu.common.pojo.CourseExample">
        delete from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insertSelective"
            parameterType="com.zhidejiaoyu.common.pojo.Course">
        insert into course
        <include refid="insertcourse"/>
    </insert>
    <select id="countByExample"
            parameterType="com.zhidejiaoyu.common.pojo.CourseExample"
            resultType="java.lang.Integer">
        select count(*) from course
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update course
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.studyParagraph != null">
                study_paragraph = #{record.studyParagraph,jdbcType=VARCHAR},
            </if>
            <if test="record.grade != null">
                grade = #{record.grade,jdbcType=VARCHAR},
            </if>
            <if test="record.version != null">
                version = #{record.version,jdbcType=VARCHAR},
            </if>
            <if test="record.label != null">
                label = #{record.label,jdbcType=VARCHAR},
            </if>
            <if test="record.pictureName != null">
                picture_name = #{record.pictureName,jdbcType=VARCHAR},
            </if>
            <if test="record.pictureUrl != null">
                picture_url = #{record.pictureUrl,jdbcType=VARCHAR},
            </if>
            <if test="record.courseName != null">
                course_name = #{record.courseName,jdbcType=VARCHAR},
            </if>
            <if test="record.status != null">
                status = #{record.status,jdbcType=INTEGER},
            </if>
            <if test="record.createTime != null">
                create_time = #{record.createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.updateTime != null">
                update_time = #{record.updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update course
        set id = #{record.id,jdbcType=BIGINT},
        study_paragraph = #{record.studyParagraph,jdbcType=VARCHAR},
        grade = #{record.grade,jdbcType=VARCHAR},
        version = #{record.version,jdbcType=VARCHAR},
        label = #{record.label,jdbcType=VARCHAR},
        picture_name = #{record.pictureName,jdbcType=VARCHAR},
        picture_url = #{record.pictureUrl,jdbcType=VARCHAR},
        course_name = #{record.courseName,jdbcType=VARCHAR},
        status = #{record.status,jdbcType=INTEGER},
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
        update_time = #{record.updateTime,jdbcType=TIMESTAMP}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective"
            parameterType="com.zhidejiaoyu.common.pojo.Course">
        update course
        <set>
            <if test="studyParagraph != null">
                study_paragraph = #{studyParagraph,jdbcType=VARCHAR},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=VARCHAR},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=VARCHAR},
            </if>
            <if test="label != null">
                label = #{label,jdbcType=VARCHAR},
            </if>
            <if test="pictureName != null">
                picture_name = #{pictureName,jdbcType=VARCHAR},
            </if>
            <if test="pictureUrl != null">
                picture_url = #{pictureUrl,jdbcType=VARCHAR},
            </if>
            <if test="courseName != null">
                course_name = #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey"
            parameterType="com.zhidejiaoyu.common.pojo.Course">
        update course
        set study_paragraph = #{studyParagraph,jdbcType=VARCHAR},
            grade           = #{grade,jdbcType=VARCHAR},
            version         = #{version,jdbcType=VARCHAR},
            label           = #{label,jdbcType=VARCHAR},
            picture_name    = #{pictureName,jdbcType=VARCHAR},
            picture_url     = #{pictureUrl,jdbcType=VARCHAR},
            course_name     = #{courseName,jdbcType=VARCHAR},
            status          = #{status,jdbcType=INTEGER},
            create_time     = #{createTime,jdbcType=TIMESTAMP},
            update_time     = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>


    <!-- 检索查询 -->
    <select id="page"
            parameterType="com.zhidejiaoyu.common.pojo.Course"
            resultMap="BaseResultMap">
        select * from course where 1 = 1
        <if test="courseName != null and courseName != '' ">
            and course_name like '%${courseName}%'
        </if>
        <if test="version != null and version != '' ">
            and version = #{version}
        </if>
        <if test="studyParagraph != null and studyParagraph != '' ">
            and study_paragraph = #{studyParagraph}
        </if>
        <if test="grade != null and grade != '' ">
            and grade = #{grade}
        </if>

        and delStatus=1 order by id desc
    </select>
    <!-- 根据课程查询单元总数 -->
    <select id="countUnit"
            parameterType="com.zhidejiaoyu.common.pojo.Course" resultType="int">
        select count(*)
        from unit
        where course_id = #{id}
    </select>

    <!-- 新增课程 -->
    <insert id="addCourse" parameterType="course"
            useGeneratedKeys="true" keyColumn="id" keyProperty="id">
        insert into course
        <include refid="insertcourse"/>
    </insert>

    <!-- 根据id查询课程名 -->
    <select id="selectCourseName" parameterType="int"
            resultType="java.lang.String">
        select course_name
        from course
        where id = #{id}
    </select>

    <resultMap type="unit" id="selectListCourseNameMap">
        <result column="id" property="id"/>
        <result column="unit_name" property="unitName"/>
        <result column="unit_index" property="unitIndex"/>
    </resultMap>
    <select id="selectListCourseName" parameterType="int"
            resultMap="selectListCourseNameMap">
        select
            unit_name,
            unit_index,
            id
        from unit
        where course_id = #{id}
        and delStatus = 1
    </select>

    <resultMap type="course" id="showcoursenameMap">
        <id column="id" property="id"/>
        <result column="course_name" property="courseName"/>
    </resultMap>
    <select id="showcoursename" resultMap="showcoursenameMap">
        select
            id,
            course_name
        from course
        where `status` = 1 and delStatus = 1;
    </select>

    <select id="showWordName" parameterType="java.lang.Integer" resultType="java.util.Map">
        select
            id,
            unit_name
        from unit
        where course_id = #{id}
        and delStatus = 1
    </select>

    <select id="chooseGradeToLabel" parameterType="Course"
            resultType="Map">
        select
			b.id,
			b.label,
			b.course_name AS courseName,
			c.id AS unitId,
			c.unit_name AS unitName
		from student a INNER JOIN course b on a.version = b.version join unit c ON b.id = c.course_id
 			and a.id = #{id} and b.grade = #{grade} and b.delStatus = 1 and b.`status` = 1 GROUP BY b.id
    </select>
    <select id="selectByStudentId" resultMap="BaseResultMap" parameterType="java.lang.Long">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        course
        WHERE
        id IN (
        SELECT DISTINCT su.course_id
        FROM
        student_unit su
        WHERE
        su.student_id = #{stuId}
        )
        ORDER BY
        id ASC
    </select>
    <select id="selectWordCountByCourseId" resultType="java.util.Map" parameterType="java.util.List">
        SELECT
        u.course_id id,
        count(uv.vocabulary_id) value
        FROM
        unit u,
        vocabulary v,
        unit_vocabulary uv
        WHERE
        v.id = uv.vocabulary_id
        AND v.delStatus = 1
        AND u.id = uv.unit_id
        AND v.delStatus = 1
        AND u.course_id in (
        <foreach collection="list" item="course" separator=",">
            #{course.id}
        </foreach>

        )
        GROUP BY u.course_id
    </select>
    <select id="selectSentenceCountByCourseId" resultType="java.util.Map" parameterType="java.util.List">
        SELECT
        u.course_id id,
        count(us.sentence_id) value
        FROM
        unit u,
        unit_sentence us
        WHERE
        u.id = us.unit_id
        AND u.course_id IN
        (
        <foreach collection="list" item="course" separator=",">
            #{course.id}
        </foreach>

        )
        GROUP BY u.course_id
    </select>
    <select id="selectCourseNameByIds" resultType="java.util.Map" parameterType="java.util.List">
        SELECT
        id,
        course_name name
        FROM
        course
        WHERE
        id IN (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
    </select>

    <select id="courseLearnInfo" parameterType="java.lang.Long" resultType="map">
        select b.id, b.course_name, b.version, b.label, IFNULL(a.learn_count, 1) AS learn_count, b.grade
        FROM learn a
                 join student_unit su on su.unit_id = a.unit_id and a.student_id = su.student_id
                 JOIN course b ON a.course_id = b.id AND a.student_id = #{studentId}
        GROUP BY b.id
        ORDER BY b.id DESC
    </select>

	<select id="postStudentByCourse" parameterType="map" resultType="map">
		select b.id, a.course_name, a.grade, a.version, a.label, b.unit_name from course a JOIN unit b ON a.id = b.course_id
 		AND a.id = #{courseId} LIMIT 0,1
	</select>

	<select id="selectCourseVersion" parameterType="map" resultType="map">
		select grade, version, label, study_paragraph from course where id = #{id}
	</select>

	<select id="getSimpleCourseByStudentIdByType" parameterType="map" resultType="map">
		SELECT
              b.id,
              b.version
		FROM
			student_unit a JOIN course b ON a.course_id = b.id
		AND a.student_id = #{studentId}
		AND a.course_id IN (
			SELECT
				id
			FROM
				course
			WHERE
				version LIKE concat('%', #{type})
		)
		GROUP BY
			b.id
	</select>

    <select id="selectAllCourseByStuIdAndType" resultType="java.util.Map" parameterType="map">
        select c.id, c.version
        from student_unit su,
             course c
        where su.course_id = c.id
          and su.student_id = #{stuId}
          and c.version like concat('%', #{typeStr})
        group by c.id
        order by c.id asc
    </select>
    <select id="unitsWordSum" parameterType="map" resultType="map">
    	select a.id AS id, count(c.id) AS sum
    		from
    	unit a, unit_vocabulary b, vocabulary c
    		where
    	a.id = b.unit_id AND b.vocabulary_id = c.id AND a.course_id = #{courseId} AND c.delStatus = 1 GROUP BY a.id
    </select>
    <select id="getStudentCourseAllByStudentId" resultType="java.lang.String" parameterType="map">
        select DISTINCT(a.version)
        from course a
                 JOIN student_unit b ON a.id = b.course_id and b.type = 2 AND b.student_id = #{studentId}
    </select>
    <select id="getCourseByIds" parameterType="map" resultType="map">
        select id,course_name name from course
        where id in(
        <foreach collection="courseIds" item="courseId" separator=",">
            #{courseId}
        </foreach>
        )
    </select>
</mapper>
