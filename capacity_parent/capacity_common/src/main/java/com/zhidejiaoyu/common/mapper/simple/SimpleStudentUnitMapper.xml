<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhidejiaoyu.common.mapper.simple.SimpleStudentUnitMapper">
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.StudentUnit">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="student_id" property="studentId" jdbcType="BIGINT"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="unit_id" property="unitId" jdbcType="BIGINT"/>
        <result column="word_status" property="wordStatus" jdbcType="INTEGER"/>
        <result column="sentence_status" property="sentenceStatus" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id, student_id, course_id, unit_id, word_status, sentence_status
    </sql>
    <delete id="deleteByStudentIds" parameterType="map">
        delete from student_unit where student_id in
        <foreach collection="students" separator="," open="(" close=")" item="student">
            #{student.id}
        </foreach>
    </delete>

    <select id="planSeniority" resultType="com.zhidejiaoyu.common.vo.SeniorityVo">
        /* 本班排行, 单元排行@Param("area") String area, @Param("school_name") String school_name, @Param("grade") String grade,
        @Param("squad") String squad, @Param("study_paragraph") String study_paragraph, @Param("haveUnit") Integer
        haveUnit*/
        select a.student_id, SUM(a.sumUnit) AS countUnit from (select student_id,course_id, SUM(word_status) AS sumUnit
        FROM student_unit GROUP BY course_id,student_id) a
        JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND b.area = #{area} AND b.school_name = #{school_name} AND b.grade = #{grade} AND b.squad = #{squad} -- AND
        b.id = 3169
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY countUnit <if
            test="haveUnit == 1">ASC
    </if>
        <if test="haveUnit == 2">DESC</if>
    </select>
    <select id="planSenioritySchool" resultType="com.zhidejiaoyu.common.vo.SeniorityVo">
        select a.student_id, SUM(a.sumUnit) AS countUnit from (select student_id,course_id, SUM(word_status) AS sumUnit
        FROM student_unit GROUP BY course_id,student_id) a
        JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND b.area = #{area} AND b.school_name = #{school_name}-- AND b.id = 3169
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY countUnit <if
            test="haveUnit == 1">ASC
    </if>
        <if test="haveUnit == 2">DESC</if> LIMIT 50;
    </select>
    <select id="planSeniorityNationwide" resultType="com.zhidejiaoyu.common.vo.SeniorityVo">
        select a.student_id, SUM(a.sumUnit) AS countUnit from (select student_id,course_id, SUM(word_status) AS sumUnit
        FROM student_unit GROUP BY course_id,student_id) a
        JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY countUnit <if
            test="haveUnit == 1">ASC
    </if>
        <if test="haveUnit == 2">DESC</if> LIMIT 50;
    </select>

    <update id="updateStatus" parameterType="map">
        update student_unit
        set word_status = 1
        where student_id = #{studentId}
          and course_id = #{courseId}
          and unit_id = #{nextUnitId}
    </update>

    <select id="getSimpleUnitByStudentIdByCourseId" parameterType="map" resultType="map">
        select b.id, b.unit_name, a.word_status
        from student_unit a
                 JOIN unit_new b ON a.unit_id = b.id
            AND a.student_id = #{studentId}
            AND a.course_id = #{courseId}
        group by b.id
    </select>
    <select id="getOpenUnitId" parameterType="map" resultType="map">
        select u.id, if(count(distinct v.id) &lt;= count(distinct l.id), 1, 2) isAll
        from unit_new u,
             unit_vocabulary_new uv,
             vocabulary v,
             learn l,
             student_unit su
        where u.id = uv.unit_id
          and uv.vocabulary_id = v.id
          and l.unit_id = u.id
          and l.vocabulary_id = v.id
          and su.unit_id = u.id
          and v.delStatus = 1
          and l.type = 1
          and l.student_id = #{studentId}
          and l.course_id = #{courseId}
        group by u.id
    </select>
    <select id="getAllCourseIdByTypeToStudent" parameterType="map" resultType="long">
        select course.id
        from student_unit unit
                 join course_new course on unit.course_id = course.id
        where unit.student_id = #{studentId}
          and unit.type = #{type}
          and course.version like '%单词辨音%'
        group by course.id
    </select>
    <select id="selectTypeMap" resultType="java.util.Map" parameterType="map">
        select type from simple_student_unit where student_id = #{student.id}
    </select>
</mapper>
