<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhidejiaoyu.common.mapper.StudentMapper">
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.Student">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <id column="uuid" property="uuid"/>
        <id column="teacher_id" property="teacherId"/>
        <id column="class_id" property="classId"/>
        <result column="account" property="account" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="account_time" property="accountTime" jdbcType="TIMESTAMP"/>
        <result column="province" property="province" jdbcType="VARCHAR"/>
        <result column="city" property="city" jdbcType="VARCHAR"/>
        <result column="area" property="area" jdbcType="VARCHAR"/>
        <result column="school_name" property="schoolName" jdbcType="VARCHAR"/>
        <result column="student_name" property="studentName" jdbcType="VARCHAR"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="nickname" property="nickname" jdbcType="VARCHAR"/>
        <result column="birth_date" property="birthDate" jdbcType="DATE"/>
        <result column="register_date" property="registerDate" jdbcType="TIMESTAMP"/>
        <result column="grade" property="grade" jdbcType="VARCHAR"/>
        <result column="squad" property="squad" jdbcType="VARCHAR"/>
        <result column="wish" property="wish" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="patriarch_phone" property="patriarchPhone" jdbcType="VARCHAR"/>
        <result column="mail" property="mail" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="head_url" property="headUrl" jdbcType="VARCHAR"/>
        <result column="head_name" property="headName" jdbcType="VARCHAR"/>
        <result column="part_url" property="partUrl" jdbcType="VARCHAR"/>
        <result column="pet_name" property="petName" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="qq" property="qq" jdbcType="VARCHAR"/>
        <result column="practical_school" property="practicalSchool" jdbcType="VARCHAR"/>
        <result column="referrer" property="referrer" jdbcType="VARCHAR"/>
        <result column="offline_gold" property="offlineGold" jdbcType="DOUBLE"/>
        <result column="system_gold" property="systemGold" jdbcType="DOUBLE"/>
        <result column="school_gold_first_time" property="schoolGoldFirstTime" jdbcType="TIMESTAMP"/>
        <result column="country_gold_first_time" property="countryGoldFirstTime" jdbcType="TIMESTAMP"/>
        <result column="worship_first_time" property="worshipFirstTime" jdbcType="TIMESTAMP"/>
        <result column="rank" property="rank" jdbcType="INTEGER"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="role" property="role" jdbcType="INTEGER"/>
        <result column="version" property="version" jdbcType="VARCHAR"/>
        <result column="first_study_time" property="firstStudyTime" jdbcType="TIMESTAMP"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="unit_id" property="unitId" jdbcType="BIGINT"/>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="unit_name" property="unitName" jdbcType="VARCHAR"/>
        <result column="sentence_course_id" property="sentenceCourseId" jdbcType="BIGINT"/>
        <result column="sentence_unit_id" property="sentenceUnitId" jdbcType="INTEGER"/>
        <result column="sentence_course_name" property="sentenceCourseName" jdbcType="VARCHAR"/>
        <result column="sentence_unit_name" property="sentenceUnitName" jdbcType="VARCHAR"/>
        <result column="show_capacity" property="showCapacity"/>
        <result column="energy" property="energy" jdbcType="INTEGER"/>
        <result column="diamond" property="diamond" jdbcType="INTEGER"/>
        <result column="bonus_expires" property="bonusExpires" jdbcType="TIMESTAMP"/>
        <result column="openid" property="openid"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id,
uuid,
        account,
        password,
        teacher_id,
        class_id,
        account_time,
        province,
        city,
        area,
        school_name,
        student_name,
        sex,
        nickname,
        birth_date,
        register_date,
        grade,
        squad,
        wish,
        phone,
        patriarch_phone,
        mail,
        status,
        head_url,
        head_name,
        part_url,
        pet_name,
        address,
        qq,
        practical_school,
        referrer,
        offline_gold,
        system_gold,
        school_gold_first_time,
        country_gold_first_time,
        worship_first_time,
        `rank`,
        update_time,
        role,
        version,
        first_study_time,
        course_id,
        unit_id,
        course_name,
        unit_name,
        sentence_course_id,
        sentence_unit_id,
        sentence_course_name,
        sentence_unit_name,
        energy,
        diamond,
        bonus_expires,
        show_capacity,
        openid
    </sql>
    <sql id="more_table_List">
        s.id,
s.uuid,
        s.account,
        s.password,
        s.teacher_id,
        s.class_id,
        s.account_time,
        s.province,
        s.city,
        s.area,
        s.school_name,
        s.student_name,
        s.sex,
        s.nickname,
        s.birth_date,
        s.register_date,
        s.grade,
        s.squad,
        s.wish,
        s.phone,
        s.patriarch_phone,
        s.mail,
        s.status,
        s.head_url,
        s.head_name,
        s.part_url,
        s.pet_name,
        s.address,
        s.qq,
        s.practical_school,
        s.referrer,
        s.offline_gold,
        s.system_gold,
        s.school_gold_first_time,
        s.country_gold_first_time,
        s.worship_first_time,
        s.`rank`,
        s.update_time,
        s.role,
        s.version,
        s.first_study_time,
        s.course_id,
        s.unit_id,
        s.course_name,
        s.unit_name,
        s.sentence_course_id,
        s.sentence_unit_id,
        s.sentence_course_name,
        s.sentence_unit_name,
        s.energy,
        s.diamond,
        s.bonus_expires,
        s.show_capacity,
        s.openid
    </sql>
    <delete id="deleteByPrimaryKeys" parameterType="map">
        update student set `status` = 3 where id in (
        <foreach collection="ids" separator="," item="id">
            #{id}
        </foreach>
        )
    </delete>
    <update id="updateByPrimaryKeySelective" parameterType="com.zhidejiaoyu.common.pojo.Student">
        update student
        <set>
            <if test="account != null">
                account = #{account,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="accountTime != null">
                account_time = #{accountTime,jdbcType=TIMESTAMP},
            </if>
            <if test="province != null">
                province = #{province,jdbcType=VARCHAR},
            </if>
            <if test="city != null">
                city = #{city,jdbcType=VARCHAR},
            </if>
            <if test="area != null">
                area = #{area,jdbcType=VARCHAR},
            </if>
            <if test="schoolName != null">
                school_name = #{schoolName,jdbcType=VARCHAR},
            </if>
            <if test="studentName != null">
                student_name = #{studentName,jdbcType=VARCHAR},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=INTEGER},
            </if>
            <if test="nickname != null">
                nickname = #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="birthDate != null">
                birth_date = #{birthDate,jdbcType=DATE},
            </if>
            <if test="registerDate != null">
                register_date = #{registerDate,jdbcType=TIMESTAMP},
            </if>
            <if test="grade != null">
                grade = #{grade,jdbcType=VARCHAR},
            </if>
            <if test="squad != null">
                squad = #{squad,jdbcType=VARCHAR},
            </if>
            <if test="wish != null">
                wish = #{wish,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="patriarchPhone != null">
                patriarch_phone = #{patriarchPhone,jdbcType=VARCHAR},
            </if>
            <if test="mail != null">
                mail = #{mail,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=INTEGER},
            </if>
            <if test="headUrl != null">
                head_url = #{headUrl,jdbcType=VARCHAR},
            </if>
            <if test="headName != null">
                head_name = #{headName,jdbcType=VARCHAR},
            </if>
            <if test="partUrl != null">
                part_url = #{partUrl,jdbcType=VARCHAR},
            </if>
            <if test="petName != null">
                pet_name = #{petName,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>
            <if test="qq != null">
                qq = #{qq,jdbcType=VARCHAR},
            </if>
            <if test="practicalSchool != null">
                practical_school = #{practicalSchool,jdbcType=VARCHAR},
            </if>
            <if test="referrer != null">
                referrer = #{referrer,jdbcType=VARCHAR},
            </if>
            <if test="offlineGold != null">
                offline_gold = #{offlineGold,jdbcType=DOUBLE},
            </if>
            <if test="systemGold != null">
                system_gold = #{systemGold,jdbcType=DOUBLE},
            </if>
            <if test="schoolGoldFirstTime != null">
                school_gold_first_time = #{schoolGoldFirstTime,jdbcType=TIMESTAMP},
            </if>
            <if test="countryGoldFirstTime != null">
                country_gold_first_time = #{countryGoldFirstTime,jdbcType=TIMESTAMP},
            </if>
            <if test="worshipFirstTime != null">
                worship_first_time = #{worshipFirstTime,jdbcType=TIMESTAMP},
            </if>
            <if test="rank != null">
                `rank` = #{rank,jdbcType=INTEGER},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="version != null">
                version = #{version,jdbcType=VARCHAR},
            </if>
            <if test="firstStudyTime != null">
                first_study_time = #{firstStudyTime,jdbcType=TIMESTAMP},
            </if>
            <if test="courseId != null">
                course_id = #{courseId,jdbcType=BIGINT},
            </if>
            <if test="unitId != null">
                unit_id = #{unitId,jdbcType=BIGINT},
            </if>
            <if test="courseName != null">
                course_name = #{courseName,jdbcType=VARCHAR},
            </if>
            <if test="unitName != null">
                unit_name = #{unitName,jdbcType=VARCHAR},
            </if>
            <if test="sentenceCourseId != null">
                sentence_course_id = #{sentenceCourseId,jdbcType=BIGINT},
            </if>
            <if test="sentenceUnitId != null">
                sentence_unit_id = #{sentenceUnitId,jdbcType=INTEGER},
            </if>
            <if test="sentenceCourseName != null">
                sentence_course_name = #{sentenceCourseName,jdbcType=VARCHAR},
            </if>
            <if test="sentenceUnitName != null">
                sentence_unit_name = #{sentenceUnitName,jdbcType=VARCHAR},
            </if>
            <if test="showCapacity != null">
                show_capacity = #{showCapacity},
            </if>
            <if test="energy != null">
                energy = #{energy},
            </if>
            <if test="diamond != null">
                diamond = #{diamond},
            </if>
            <if test="bonusExpires != null">
                bonus_expires = #{bonusExpires}
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zhidejiaoyu.common.pojo.Student">
        update student
        set account                 = #{account,jdbcType=VARCHAR},
            password                = #{password,jdbcType=VARCHAR},
            account_time            = #{accountTime,jdbcType=TIMESTAMP},
            province                = #{province,jdbcType=VARCHAR},
            city                    = #{city,jdbcType=VARCHAR},
            area                    = #{area,jdbcType=VARCHAR},
            school_name             = #{schoolName,jdbcType=VARCHAR},
            student_name            = #{studentName,jdbcType=VARCHAR},
            sex                     = #{sex,jdbcType=INTEGER},
            nickname                = #{nickname,jdbcType=VARCHAR},
            birth_date              = #{birthDate,jdbcType=DATE},
            register_date           = #{registerDate,jdbcType=TIMESTAMP},
            grade                   = #{grade,jdbcType=VARCHAR},
            squad                   = #{squad,jdbcType=VARCHAR},
            wish                    = #{wish,jdbcType=VARCHAR},
            phone                   = #{phone,jdbcType=VARCHAR},
            patriarch_phone         = #{patriarchPhone,jdbcType=VARCHAR},
            mail                    = #{mail,jdbcType=VARCHAR},
            status                  = #{status,jdbcType=INTEGER},
            head_url                = #{headUrl,jdbcType=VARCHAR},
            head_name               = #{headName,jdbcType=VARCHAR},
            part_url                = #{partUrl,jdbcType=VARCHAR},
            pet_name                = #{petName,jdbcType=VARCHAR},
            address                 = #{address,jdbcType=VARCHAR},
            qq                      = #{qq,jdbcType=VARCHAR},
            practical_school        = #{practicalSchool,jdbcType=VARCHAR},
            referrer                = #{referrer,jdbcType=VARCHAR},
            offline_gold            = #{offlineGold,jdbcType=DOUBLE},
            system_gold             = #{systemGold,jdbcType=DOUBLE},
            school_gold_first_time  = #{schoolGoldFirstTime,jdbcType=TIMESTAMP},
            country_gold_first_time = #{countryGoldFirstTime,jdbcType=TIMESTAMP},
            worship_first_time      = #{worshipFirstTime,jdbcType=TIMESTAMP},
            `rank`                  = #{rank,jdbcType=INTEGER},
            update_time             = #{updateTime,jdbcType=TIMESTAMP},
            version                 = #{version,jdbcType=VARCHAR},
            first_study_time        = #{firstStudyTime,jdbcType=TIMESTAMP},
            course_id               = #{courseId,jdbcType=BIGINT},
            unit_id                 = #{unitId,jdbcType=BIGINT},
            course_name             = #{courseName,jdbcType=VARCHAR},
            unit_name               = #{unitName,jdbcType=VARCHAR},
            sentence_course_id      = #{sentenceCourseId,jdbcType=BIGINT},
            sentence_unit_id        = #{sentenceUnitId,jdbcType=INTEGER},
            sentence_course_name    = #{sentenceCourseName,jdbcType=VARCHAR},
            sentence_unit_name      = #{sentenceUnitName,jdbcType=VARCHAR},
            energy                  = #{energy,jdbcType=INTEGER},
            diamond                 = #{diamond,jdbcType=INTEGER},
            bonus_expires           = #{bonusExpires,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 根据学生id数据批量修改有效期和到期时间 -->
    <update id="updateRankAndAccountTimeByIds" parameterType="map">
        update student set `rank`=#{rank},account_time=#{accountTime} where id
        in
        <foreach collection="idArr" item="id" open="(" close=")"
                 separator=",">
            #{id}
        </foreach>
    </update>
    <update id="updateByPrimarykeys" parameterType="map">
        update student
        <set>
            grade =
            <foreach collection="students" item="student" separator=" " open="case ID" close="end">
                when #{student.id} then #{student.grade,jdbcType=VARCHAR}
            </foreach>
            where id in
            <foreach collection="students" item="student" separator="," open="(" close=")">
                #{student.id}
            </foreach>
        </set>
    </update>
    <update id="updateDelStatus" parameterType="map">
        update student set `status` = 1 where id in (
        <foreach collection="stuIds" item="id" separator=",">
            #{id}
        </foreach>
        )
    </update>
    <update id="updateStatus" parameterType="map">
        update student set `status` = 3 where id in (
        <foreach collection="students" item="student" separator=",">
            #{student.id}
        </foreach>
        )
    </update>
    <select id="selectAllStudentId" resultType="long">
        select id
        from student
        where account_time is not null
          and (`rank` > 7 or (`rank` &lt; 7 and account_time > now()))
    </select>

    <update id="updateSchoolGoldFirstTimeToNull" parameterType="map">
        update student set school_gold_first_time = null where id in (
        <foreach collection="students" separator="," item="student">
            #{student.id}
        </foreach>
        )
    </update>

    <select id="loginJudge" parameterType="com.zhidejiaoyu.common.pojo.Student"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where account = #{account} and
        password = #{password} limit 1
    </select>

    <select id="indexData" parameterType="long"
            resultMap="BaseResultMap">
        select *
        from student
        where id = #{student_id}
    </select>

    <sql id="ID_GRADE">
        id,
        grade,
        version
    </sql>
    <select id="selectIdAndGradeAndVersion" resultType="com.zhidejiaoyu.common.pojo.Student">
        select
        <include refid="ID_GRADE"/>
        from student where version is not null and version != '' and grade is not null and grade !=''
        and head_url is not null and head_url != '' and account_time &gt;= now()
    </select>
    <select id="selectAccountTimeLessThreeDays" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student where to_days(account_time) - to_days(now()) &lt;= 3 and to_days(account_time) - to_days(now())
        &gt;= 0
    </select>
    <select id="selectLevelByStuId" resultType="java.util.Map" parameterType="map">
        SELECT
        s.id id,
        CASE
        WHEN @preRank = s.system_gold + s.offline_gold THEN
        @curRank
        WHEN @preRank := s.system_gold + s.offline_gold THEN
        @curRank :=@curRank + 1
        END AS `rank`
        FROM
        student s,
        (
        SELECT
        @curRank := 0 ,@preRank := 0
        ) r
        <where>
            <if test="flag == 2">
                <if test="student.teacherId == null">
                    and teacher_id is null
                </if>
                <if test="schoolAdminId != null">
                    and (teacher_id = #{schoolAdminId} or teacher_id in (select teacher_id from teacher where
                    school_admin_id = #{schoolAdminId}))
                </if>
                <if test="schoolAdminId == null and student.teacherId == null">
                    and teacher_id = #{student.teacherId}
                </if>
            </if>
            <if test="flag == 1">
                <if test="student.classId != null and student.classId != ''">
                    and class_id = #{student.classId}
                </if>
                <if test="student.classId == null or student.classId == ''">
                    and class_id is null
                </if>
                <if test="student.teacherId != null">
                    and teacher_id = #{student.teacherId}
                </if>
                <if test="student.teacherId == null">
                    and teacher_id is null
                </if>
            </if>
            and s.role in (1 , 2)
            and s.status &lt;> 3
            and s.account_time is not null
        </where>
        ORDER BY
        system_gold + offline_gold DESC
    </select>

    <sql id="selectSeniority_model_sql">
        <!-- 本班 -->
        <if test="model == '1' or model == 1">
            <if test="classId != '' and classId != null ">
                where class_id = #{classId}
            </if>
            <if test="classId == '' or classId == null ">
                where teacher_id = #{teacherId} and class_id is null
            </if>
        </if>
        <!-- 本校 -->
        <if test="model == '2' or model == 2">
            where teacher_id = #{teacherId}
        </if>
    </sql>
    <select id="selectSeniority" parameterType="map" resultType="map">
        SELECT
        s.id, s.nickname as studentName, s.head_url, s.province, s.city, s.area, (s.offline_gold + s.system_gold) AS
        gold,
        c.zs,
        w.mb
        FROM
        student s,
        <!-- ccie c, -->
        (
        SELECT
        COUNT(c.id) AS zs
        FROM
        ccie c, student stu
        WHERE
        c.student_id = stu.id
        ) c,
        (
        SELECT
        COUNT(w.id) AS mb
        FROM
        worship w,student stu
        WHERE
        w.student_id_by_worship = stu.id
        ) w
        <include refid="selectSeniority_model_sql"/>
        GROUP BY s.id
    </select>

    <select id="getCourseIdAndUnitId" parameterType="map" resultType="map">
        select course_id, unit_id, sentence_course_id, sentence_unit_id
        from student
        where id = #{studentId}
    </select>
    <select id="selectHasStudyRecord" resultType="java.util.Map" parameterType="map">
        select s.account, s.student_name studentName from student s, learn l where l.student_id = s.id and l.student_id
        in (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>
        )
        group by l.student_id
    </select>
    <select id="countByPhaseAndVersion" resultType="java.lang.Integer" parameterType="map">
        select count(id) from student where version = #{student.version} and grade in (
        <if test="phase == '高中'">
            '高一','高二','高三'
        </if>
        <if test="phase == '初中'">
            '七年级','八年级','九年级'
        </if>
        )
    </select>
    <select id="getSchools" resultType="java.lang.String" parameterType="boolean">
        select distinct(s.school_name) from student s
        <where>
            <if test="isNewStudentSchool == true">
                and s.sex is null
            </if>
            and s.`status` &lt;&gt; 3
            and s.school_name is not null
            and s.school_name &lt;&gt; ''
        </where>
    </select>
    <select id="schoolHeadcountNationwide" resultType="java.lang.Integer">
        select count(id) from student
        <where>
            <if test="study_paragraph == '初中' ">and grade in ('七年级', '八年级', '九年级', '初一', '初二', '初三')</if>
            <if test="study_paragraph == '高中' ">and grade in ('高一', '高二', '高三', '高中')</if>
            and version = #{version}
        </where>

    </select>

    <select id="selectMaxGoldForSchool" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM student
        <where>
            school_gold_first_time is not null
            <if test="schoolAdminId == null">
                and teacher_id is null
            </if>
            <if test="schoolAdminId != null">
                and (teacher_id = #{schoolAdminId} or teacher_id in (select teacher_id from teacher where
                school_admin_id = #{schoolAdminId}))
            </if>
        </where>
        ORDER BY system_gold + offline_gold DESC
        LIMIT 1
    </select>

    <select id="selectMaxGoldForGold" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM student
        WHERE
        system_gold + offline_gold = #{maxGold}
        <if test="schoolAdminId == null">
            and teacher_id is null
        </if>
        <if test="schoolAdminId != null">
            and (teacher_id = #{schoolAdminId} or teacher_id in (select teacher_id from teacher where
            school_admin_id = #{schoolAdminId}))
        </if>
    </select>

    <select id="getStudentAccountTime" resultType="map" parameterType="map">
        select id, account, student_name, DATE_FORMAT(account_time, '%Y-%m-%d') AS account_time
        from student
        where id = #{studentId}
    </select>
    <select id="selectHeadUrlMapByStudentId" resultType="java.util.Map" parameterType="map">
        select id, head_url headUrl from student where id in (
        <foreach collection="studentIds" separator="," item="id">
            #{id}
        </foreach>
        )
    </select>

    <select id="selectNicknameMapByStudentId" resultType="java.util.Map" parameterType="map">
        select id, nickname from student where id in (
        <foreach collection="studentIds" separator="," item="id">
            #{id}
        </foreach>
        )
    </select>

    <select id="getVocabularyCountByStudent" parameterType="map" resultType="integer">
        select ((select count(listen.id)
                 from capacity_listen listen,
                      learn l
                 where l.vocabulary_id = listen.vocabulary_id
                   and l.type = 1
                   and l.study_model = '慧听写'
                   and l.student_id = stu.id
                   and listen.unit_id = l.unit_id
                   and listen.student_id = stu.id
                   and listen.memory_strength &lt; 1
                   and push &lt; now()) +
                (select count(cwrite.id)
                 from capacity_write cwrite,
                      learn l
                 where l.vocabulary_id = cwrite.vocabulary_id
                   and l.type = 1
                   and l.study_model = '慧默写'
                   and l.student_id = stu.id
                   and cwrite.unit_id = l.unit_id
                   and cwrite.student_id = stu.id
                   and cwrite.memory_strength &lt; 1
                   and push &lt; now()) +
                (select count(memory.id)
                 from capacity_memory memory,
                      learn l
                 where l.vocabulary_id = memory.vocabulary_id
                   and l.type = 1
                   and l.study_model = '慧记忆'
                   and l.student_id = stu.id
                   and memory.unit_id = l.unit_id
                   and memory.student_id = stu.id
                   and memory.memory_strength &lt; 1
                   and push &lt; now()) +
                (select count(picture.id)
                 from capacity_picture picture,
                      learn l
                 where l.vocabulary_id = picture.vocabulary_id
                   and l.type = 1
                   and l.study_model = '单词图鉴'
                   and l.student_id = stu.id
                   and picture.unit_id = l.unit_id
                   and picture.student_id = stu.id
                   and picture.memory_strength &lt; 1
                   and push &lt; now())
                   ) count
        from student stu
        where stu.id = #{studentId}
    </select>

    <select id="getSentenceCountByStudent" parameterType="map" resultType="integer">
        select ((select count(translate.id)
                 from sentence_translate translate
                 where translate.student_id = stu.id
                   and translate.memory_strength &lt; 1
                   and push &lt; now()) +
                (select count(cwrite.id)
                 from sentence_write cwrite
                 where cwrite.student_id = stu.id
                   and cwrite.memory_strength &lt; 1
                   and push &lt; now()) +
                (select count(memory.id)
                 from sentence_listen memory
                 where memory.student_id = stu.id
                   and memory.memory_strength &lt; 1
                   and push &lt; now())
                   ) count
        from student stu
        where stu.id = #{studentId}
    </select>
    <select id="countHasLoginLogStudentsBySchoolAdminId" resultType="java.lang.Integer">
        select count(s.id)
        from student s
        where s.account_time is not null
          and s.role in (1, 2)
          and s.status &lt;> 3
          and s.teacher_id in (select teacher_id from teacher where school_admin_id = #{schoolAdminId})
    </select>
    <select id="selectHasRank" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student where `status` &lt;> 3 and account_time is not null
    </select>
    <select id="getAllFrozenStudent" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student where `status` = 5 and account_time is not null
    </select>
    <select id="selectBySchoolAdminId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="more_table_List"/>
        from student s join teacher t on s.teacher_id = t.teacher_id and t.school_admin_id = #{schoolAdminId}
    </select>

    <select id="selectNotDeleteBySchoolAdminId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="more_table_List"/>
        from student s
        join teacher t on s.teacher_id = t.teacher_id and t.school_admin_id = #{schoolAdminId} and s.status &lt;> 3
        union all
        select
        <include refid="more_table_List"/>
        from
        student s
        join teacher t on s.teacher_id = t.school_admin_id and t.school_admin_id = #{schoolAdminId} and s.status &lt;> 3
    </select>
    <select id="selectByTeacherId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from student where teacher_id = #{teacherId}
    </select>
    <select id="selectDeleteAccount" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from student
        where
        id in (
        <foreach collection="studentIds" item="studentId" separator=",">
            #{studentId}
        </foreach>
        )
    </select>
    <select id="deleteByIds" parameterType="map">
        delete from student where id in (
        <foreach collection="studentIds" item="studentId" separator=",">
            #{studentId}
        </foreach>
        )
    </select>
    <select id="selectExperienceAccount" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from student
        where
        account_time is not null
        and account_time &lt; now()
        and `status` = 1
        and `rank` &lt;= 7
    </select>
    <select id="getAllStudentIdTeacherId" resultType="map">
        select stu.id              studentId,
               tea.school_admin_id adminId,
               stu.grade           grade
        from student stu
                 join teacher tea
                      on stu.teacher_id = tea.teacher_id or stu.teacher_id = tea.school_admin_id
                 join test_record test
                      on test.student_id = stu.id
        where stu.account_time is not null
          and test.study_model like '%摸底测试%'
        group by stu.id
    </select>
    <select id="selectByAccount" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from student
        where account = #{account}
        limit 1
    </select>
    <select id="selectByOpenId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from student
        where openid like concat('%', #{openid}, '%')
        limit 1
    </select>
    <select id="selectSourcePowerRankByIds" resultType="java.util.Map" parameterType="map">
        <foreach collection="studentIds" item="id" separator=" union all ">
            select s.id studentId, s.nickname nickName, s.head_url headUrl
            from student s where s.id = #{id}
        </foreach>
    </select>
    <select id="selectByAccounts" resultType="com.zhidejiaoyu.common.vo.wechat.smallapp.studyinfo.DailyStateVO"
            parameterType="map">
        select
        s.id studentId,
        se.phase,
        s.student_name studentName,
        s.account
        from student s, student_expansion se where s.id = se.student_id and s.account in (
        <foreach collection="accountArr" separator="," item="account">
            #{account}
        </foreach>
        )
    </select>
    <select id="countBySchoolAdminId" resultType="java.lang.Integer" parameterType="map">
        select count(distinct t.id)
        from (
                 select id
                 from student
                 where teacher_id = 299
                 union all
                 select id
                 from student
                 where teacher_id in (select teacher_id from teacher where school_admin_id = 299)) t
    </select>
    <select id="selectByTeacherIdOrSchoolAdminId" resultMap="BaseResultMap" parameterType="map">
        select t.id, t.student_name from (
        select
        <include refid="more_table_List"/>
        from student s
        join teacher t on s.teacher_id = t.teacher_id and t.school_admin_id = #{userId} and s.status &lt;> 3
        and s.account_time >= now()
        <if test="dto.accountOrName != null">
            and (s.account like concat('%', #{dto.accountOrName}, '%') or s.student_name like concat('%',
            #{dto.accountOrName}, '%'))
        </if>
        union all
        select
        <include refid="more_table_List"/>
        from
        student s
        join teacher t on s.teacher_id = t.school_admin_id and t.school_admin_id = #{userId} and s.status &lt;> 3
        and s.account_time >= now()
        <if test="dto.accountOrName != null">
            and (s.account like concat('%', #{dto.accountOrName}, '%') or s.student_name like concat('%',
            #{dto.accountOrName}, '%'))
        </if>) t group by t.id
    </select>
    <select id="selectNotDelete" resultMap="BaseResultMap">
        select
        <include refid="more_table_List"/>
        from student s where s.status &lt;> 3
    </select>
    <select id="selectByUuid" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from student
        where `uuid` = #{uuid}
        limit 1
    </select>

</mapper>
