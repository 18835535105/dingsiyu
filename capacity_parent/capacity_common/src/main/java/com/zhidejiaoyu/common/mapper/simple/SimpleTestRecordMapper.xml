<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper
        namespace="com.zhidejiaoyu.common.mapper.simple.SimpleTestRecordMapper">
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.TestRecord">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="student_id" property="studentId" jdbcType="BIGINT"/>
        <result column="course_id" property="courseId" jdbcType="BIGINT"/>
        <result column="unit_id" property="unitId" jdbcType="BIGINT"/>
        <result column="genre" property="genre" jdbcType="VARCHAR"/>
        <result column="test_start_time" property="testStartTime" jdbcType="TIMESTAMP"/>
        <result column="test_end_time" property="testEndTime" jdbcType="TIMESTAMP"/>
        <result column="point" property="point" jdbcType="INTEGER"/>
        <result column="history_best_point" property="historyBestPoint" jdbcType="INTEGER"/>
        <result column="history_bad_point" property="historyBadPoint" jdbcType="INTEGER"/>
        <result column="quantity" property="quantity" jdbcType="INTEGER"/>
        <result column="explain" property="explain" jdbcType="VARCHAR"/>
        <result column="error_count" property="errorCount" jdbcType="INTEGER"/>
        <result column="right_count" property="rightCount" jdbcType="INTEGER"/>
        <result column="study_model" property="studyModel" jdbcType="VARCHAR"/>
        <result column="award_gold" property="awardGold" jdbcType="INTEGER"/>
        <result column="better_count" property="betterCount" jdbcType="INTEGER" />
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="pass" property="pass" jdbcType="INTEGER"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" suffix=")" prefixOverrides="and">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach collection="criterion.value" item="listItem" open="(" close=")"
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List" >
        id, student_id, course_id, unit_id, genre, test_start_time, test_end_time, point,
        history_best_point, history_bad_point, quantity, `explain`, error_count, right_count,
        study_model, award_gold, better_count, type, pass
    </sql>
    <sql id="test_score_info">
        id, test_id testId, selected, word, option_a optionA,
        option_b optionB,
        option_c optionC,
        option_d optionD,
        answer
    </sql>
    <sql id="study_model_sql">
        <if test="model == 0">
            and study_model = '单词图鉴'
        </if>
        <if test="model == 1">
            and study_model = '慧记忆'
        </if>
        <if test="model == 2">
            and study_model = '慧听写'
        </if>
        <if test="model == 3">
            and study_model = '慧默写'
        </if>
        <if test="model == 4">
            and study_model = '例句听力'
        </if>
        <if test="model == 5">
            and study_model = '例句翻译'
        </if>
        <if test="model == 6">
            and study_model = '例句默写'
        </if>
    </sql>

    <select id="selectByStudentIdAndUnitId"
            resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from test_record where student_id = #{studentId} and unit_id =
        #{unitId} and genre = #{genre} and study_model = #{studyModel} and type = 1 order by id desc limit 1
    </select>

    <select id="selectByUnitId" resultType="java.lang.Integer"
            parameterType="map">
        select count(id)
        from test_record
        where
        student_id = #{studentId} and
        unit_id = #{unitId}
    </select>

    <select id="selectByExample" resultMap="BaseResultMap"
            parameterType="com.zhidejiaoyu.common.pojo.TestRecordExample">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from test_record
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map" >
        update test_record
        <set >
            <if test="record.id != null" >
                id = #{record.id,jdbcType=BIGINT},
            </if>
            <if test="record.studentId != null" >
                student_id = #{record.studentId,jdbcType=BIGINT},
            </if>
            <if test="record.courseId != null" >
                course_id = #{record.courseId,jdbcType=BIGINT},
            </if>
            <if test="record.unitId != null" >
                unit_id = #{record.unitId,jdbcType=BIGINT},
            </if>
            <if test="record.genre != null" >
                genre = #{record.genre,jdbcType=VARCHAR},
            </if>
            <if test="record.testStartTime != null" >
                test_start_time = #{record.testStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.testEndTime != null" >
                test_end_time = #{record.testEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="record.point != null" >
                point = #{record.point,jdbcType=INTEGER},
            </if>
            <if test="record.historyBestPoint != null" >
                history_best_point = #{record.historyBestPoint,jdbcType=INTEGER},
            </if>
            <if test="record.historyBadPoint != null" >
                history_bad_point = #{record.historyBadPoint,jdbcType=INTEGER},
            </if>
            <if test="record.quantity != null" >
                quantity = #{record.quantity,jdbcType=INTEGER},
            </if>
            <if test="record.explain != null" >
                `explain` = #{record.explain,jdbcType=VARCHAR},
            </if>
            <if test="record.errorCount != null" >
                error_count = #{record.errorCount,jdbcType=INTEGER},
            </if>
            <if test="record.rightCount != null" >
                right_count = #{record.rightCount,jdbcType=INTEGER},
            </if>
            <if test="record.studyModel != null" >
                study_model = #{record.studyModel,jdbcType=VARCHAR},
            </if>
            <if test="record.awardGold != null" >
                award_gold = #{record.awardGold,jdbcType=INTEGER},
            </if>
            <if test="record.betterCount != null" >
                better_count = #{record.betterCount,jdbcType=INTEGER},
            </if>
        </set>
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByExample" parameterType="map" >
        update test_record
        set id = #{record.id,jdbcType=BIGINT},
        student_id = #{record.studentId,jdbcType=BIGINT},
        course_id = #{record.courseId,jdbcType=BIGINT},
        unit_id = #{record.unitId,jdbcType=BIGINT},
        genre = #{record.genre,jdbcType=VARCHAR},
        test_start_time = #{record.testStartTime,jdbcType=TIMESTAMP},
        test_end_time = #{record.testEndTime,jdbcType=TIMESTAMP},
        point = #{record.point,jdbcType=INTEGER},
        history_best_point = #{record.historyBestPoint,jdbcType=INTEGER},
        history_bad_point = #{record.historyBadPoint,jdbcType=INTEGER},
        quantity = #{record.quantity,jdbcType=INTEGER},
        `explain` = #{record.explain,jdbcType=VARCHAR},
        error_count = #{record.errorCount,jdbcType=INTEGER},
        right_count = #{record.rightCount,jdbcType=INTEGER},
        study_model = #{record.studyModel,jdbcType=VARCHAR},
        award_gold = #{record.awardGold,jdbcType=INTEGER},
        better_count = #{record.betterCount,jdbcType=INTEGER}
        <if test="_parameter != null" >
            <include refid="Update_By_Example_Where_Clause" />
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.zhidejiaoyu.common.pojo.TestRecord">
        update test_record
        <set>
            <if test="studentId != null">
                student_id = #{studentId,jdbcType=BIGINT},
            </if>
            <if test="courseId != null">
                course_id = #{courseId,jdbcType=BIGINT},
            </if>
            <if test="unitId != null">
                unit_id = #{unitId,jdbcType=BIGINT},
            </if>
            <if test="genre != null">
                genre = #{genre,jdbcType=VARCHAR},
            </if>
            <if test="testStartTime != null">
                test_start_time = #{testStartTime,jdbcType=TIMESTAMP},
            </if>
            <if test="testEndTime != null">
                test_end_time = #{testEndTime,jdbcType=TIMESTAMP},
            </if>
            <if test="point != null">
                point = #{point,jdbcType=INTEGER},
            </if>
            <if test="historyBestPoint != null">
                history_best_point = #{historyBestPoint,jdbcType=INTEGER},
            </if>
            <if test="historyBadPoint != null">
                history_bad_point = #{historyBadPoint,jdbcType=INTEGER},
            </if>
            <if test="quantity != null">
                quantity = #{quantity,jdbcType=INTEGER},
            </if>
            <if test="explain != null">
                `explain` = #{explain,jdbcType=VARCHAR},
            </if>
            <if test="errorCount != null">
                error_count = #{errorCount,jdbcType=INTEGER},
            </if>
            <if test="rightCount != null">
                right_count = #{rightCount,jdbcType=INTEGER},
            </if>
            <if test="studyModel != null">
                study_model = #{studyModel,jdbcType=VARCHAR},
            </if>
            <if test="awardGold != null">
                award_gold = #{awardGold,jdbcType=INTEGER},
            </if>
            <if test="betterCount != null" >
                better_count = #{betterCount,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.zhidejiaoyu.common.pojo.TestRecord">
        update test_record
        set student_id         = #{studentId,jdbcType=BIGINT},
            course_id          = #{courseId,jdbcType=BIGINT},
            unit_id            = #{unitId,jdbcType=BIGINT},
            genre              = #{genre,jdbcType=VARCHAR},
            test_start_time    = #{testStartTime,jdbcType=TIMESTAMP},
            test_end_time      = #{testEndTime,jdbcType=TIMESTAMP},
            point              = #{point,jdbcType=INTEGER},
            history_best_point = #{historyBestPoint,jdbcType=INTEGER},
            history_bad_point  = #{historyBadPoint,jdbcType=INTEGER},
            quantity           = #{quantity,jdbcType=INTEGER},
            `explain`          = #{explain,jdbcType=VARCHAR},
            error_count        = #{errorCount,jdbcType=INTEGER},
            right_count        = #{rightCount,jdbcType=INTEGER},
            study_model        = #{studyModel,jdbcType=VARCHAR},
            award_gold         = #{awardGold,jdbcType=INTEGER},
            better_count = #{betterCount,jdbcType=INTEGER}
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateGameRecord" parameterType="map">
        update test_record set `explain` = '游戏测试次数#2#恭喜你旗开得胜，祝未来勇闯天涯！' where student_id = #{student.id} and  genre = '学前游戏测试'
    </update>

    <select id="showRecord" parameterType="map" resultType="com.zhidejiaoyu.common.Vo.simple.testVo.TestRecordVo">
        select a.id,
               a.genre,
               a.test_start_time testStartTime,
               a.test_end_time testEndTime,
               a.point,
               a.quantity,
               a.explain,
               a.study_model studyModel,
               c.course_name courseName,
               if (a.genre = '学后测试', '全部', u.unit_name) unitName,
               IFNULL(a.award_gold, 0) awardGold
        from test_record a
                 left join course c on a.course_id = c.id
                 left join unit u on u.id = a.unit_id
                 left join student_unit su on su.unit_id = a.unit_id
        where su.type = 2
          and su.student_id = a.student_id
          and a.student_id = #{student_id}
          and a.study_model &lt;&gt; '词汇考点'
          and a.study_model &lt;&gt; '语法辨析'
        order by a.test_end_time Desc
    </select>
    <select id="countUnitTest" resultType="java.lang.Integer" parameterType="map">
        select count(id) from test_record where genre = '单元闯关测试'
        <if test="flag == 1">
            and pass = 1
        </if>
        and to_days(test_end_time) = to_days(now()) and student_id = #{studentId}
    </select>
    <select id="selectByGenre" resultType="com.zhidejiaoyu.common.pojo.TestRecord" parameterType="map">
        select
        <include refid="Base_Column_List"/>
        from test_record where student_id = #{stuId} and genre = #{genre}
    </select>

    <sql id="simple_test_model">
		<if test="model == 1">
			"单词辨音"
		</if>
		<if test="model == 2">
			"词组辨音"
		</if>
		<if test="model == 3">
			"快速单词"
		</if>
		<if test="model == 4">
			"快速词组"
		</if>
		<if test="model == 5">
			"词汇考点"
		</if>
		<if test="model == 6">
			"快速句型"
		</if>
		<if test="model == 7">
			"语法辨析"
		</if>
		<if test="model == 8">
			"单词默写"
		</if>
		<if test="model == 9">
			"词组默写"
		</if>
	</sql>

    <select id="selectPoint" parameterType="map" resultType="integer">
        select max(point) from test_record where student_id = #{student_id} and unit_id = #{unit_id} and genre = #{genre}
        <include refid="simple_test_model" />
    </select>
    <select id="selectTodayCompleteTestCenter" resultType="java.lang.Integer" parameterType="map">
        SELECT count(genre)
        FROM
            test_record
        WHERE
            student_id = 3155
            AND genre IN (
                '已学测试',
                '生词测试',
                '熟词测试',
                '五维测试'
            )
            AND TO_DAYS(test_end_time) = TO_DAYS(now())
            AND point &gt;= 80
    </select>
    <select id="countCompleteByStudentId" resultType="java.util.Map" parameterType="map">
        SELECT
            #{student.id}       studentId,
            memory.c            memory,
            listen.c            listen,
            writing.c           `write`,
            sentenceListen.c    sentenceListen,
            sentenceTranslate.c sentenceTranslate
        FROM
            (
                SELECT count(id) c
                FROM
                    test_record
                WHERE
                    study_model = '慧记忆'
                    AND history_best_point - history_bad_point >= 20
                    AND student_id = #{student.id}
            ) memory,
            (
                SELECT count(id) c
                FROM
                    test_record
                WHERE
                    study_model = '慧听写'
                    AND history_best_point - history_bad_point >= 30
                    AND student_id = #{student.id}
            ) listen,
            (
                SELECT count(id) c
                FROM
                    test_record
                WHERE
                    study_model = '慧默写'
                    AND history_best_point - history_bad_point >= 20
                    AND student_id = #{student.id}
            ) writing,
            (
                SELECT count(id) c
                FROM
                    test_record
                WHERE
                    study_model = '例句听力'
                    AND history_best_point - history_bad_point >= 20
                    AND student_id = #{student.id}
            ) sentenceListen,
            (
                SELECT count(id) c
                FROM
                    test_record
                WHERE
                    study_model = '例句翻译'
                    AND history_best_point - history_bad_point >= 20
                    AND student_id = #{student.id}
            ) sentenceTranslate;
    </select>
    <select id="selectMaxPointByStudyModel" resultMap="BaseResultMap" parameterType="map">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        test_record
        WHERE
        student_id = #{stuId}
        AND course_id = #{courseId}
        AND genre = #{genre}
        <if test="studyModel != null">
            AND study_model = #{studyModel}
        </if>
        ORDER BY
        point DESC
        LIMIT 1
    </select>
    <select id="selectJudgeTestToModel" resultType="java.lang.Integer" parameterType="map">
        SELECT id from test_record where student_id = #{student_id} AND course_id = #{course_id}
        <include refid="study_model_sql"/>
        <if test="select == 1">
            and genre = '已学测试'
        </if>
        <if test="select == 2">
            and genre = '生词测试'
        </if>
        <if test="select == 3">
            and genre = '熟词测试'
        </if>
        limit 0,1
    </select>
    <select id="planSeniority" resultType="com.zhidejiaoyu.common.Vo.SeniorityVo">
        select a.student_id, SUM(a.testCount) AS countTest from (SELECT student_id, course_id, COUNT(id) AS testCount FROM test_record GROUP BY student_id, course_id) a JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND b.area = #{area} AND b.school_name = #{school_name} AND b.grade = #{grade} AND b.squad = #{squad}  -- AND b.id = 3169
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY countTest <if test="haveTest == 1">ASC</if> <if test="haveTest == 2">DESC</if>
    </select>
    <select id="planSenioritySchool" resultType="com.zhidejiaoyu.common.Vo.SeniorityVo">
        select a.student_id, SUM(a.testCount) AS countTest from (SELECT student_id, course_id, COUNT(id) AS testCount FROM test_record GROUP BY student_id, course_id) a JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND b.area = #{area} AND b.school_name = #{school_name}  -- AND b.id = 3169
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY countTest <if test="haveTest == 1">ASC</if> <if test="haveTest == 2">DESC</if> LIMIT 50;
    </select>
    <select id="planSeniorityNationwide" resultType="com.zhidejiaoyu.common.Vo.SeniorityVo">
        select a.student_id, SUM(a.testCount) AS countTest from (SELECT student_id, course_id, COUNT(id) AS testCount FROM test_record GROUP BY student_id, course_id) a JOIN student b ON a.student_id = b.id JOIN course c ON a.course_id = c.id
        AND c.study_paragraph = #{study_paragraph} AND c.version = #{version} GROUP BY a.student_id ORDER BY countTest <if test="haveTest == 1">ASC</if> <if test="haveTest == 2">DESC</if> LIMIT 50;
    </select>

<!-- 简洁版 -->

	<!-- 1:单词辨音; 2:词组辨音; 3:快速单词; 4:快速词组; 5:词汇考点; 6:快速句型; 7:语法辨析; 8单词默写; 9:词组默写; -->
	<sql id="simple_test_type">
		<if test="type == 1">
			"单词辨音"
		</if>
		<if test="type == 2">
			"词组辨音"
		</if>
		<if test="type == 3">
			"快速单词"
		</if>
		<if test="type == 4">
			"快速词组"
		</if>
		<if test="type == 5">
			"词汇考点"
		</if>
		<if test="type == 6">
			"快速句型"
		</if>
		<if test="type == 7">
			"语法辨析"
		</if>
		<if test="type == 8">
			"单词默写"
		</if>
		<if test="type == 9">
			"词组默写"
		</if>
	</sql>

    <select id="getWhetherTest" parameterType="map" resultType="long">
    	SELECT
			id
		FROM
			test_record
		WHERE
			student_id = #{studentId}
			and genre = #{testType}
		<if test="courseId != null">
			and course_id = #{courseId}
		</if>
		<if test="unitId != null and testType != '学前测试' and testType != '学后测试' and testType != '课前测试' and testType != '课后测试' ">
			and unit_id = #{unitId}
		</if>
        and type = 1
			and study_model = <include refid="simple_test_type" />
        limit 1
    </select>

    <select id="getUnitTestByCourseId" parameterType="map" resultType="map">
        select unit_id,
               id
        from test_record
        where unit_id in (select id from unit where course_id = #{courseId})
          AND student_id = #{studentId}
          AND genre = '单元闯关测试'
          and type = 1
    </select>

    <select id="selectTestDetailVo" resultType="com.zhidejiaoyu.common.Vo.simple.testVo.TestDetailVo" parameterType="map">
        select concat(concat(concat('清学智能', c.version), '-'), t.genre)              title,
               s.student_name                                                       name,
               concat('测试时间：', date_format(if(t.test_start_time is null, now(), t.test_start_time), '%Y-%m-%d %H:%i:%s')) testTime,
               if(u.unit_name is null or u.unit_name = '', ' ',
                  concat(concat(concat('测试内容：', u.unit_name), '-'), t.genre))       testContent,
               concat(concat('共 ', t.quantity), ' 题')                               subjectCount,
               concat(concat('对 ', t.right_count), ' 题')                            rightCount,
               concat(concat('错 ', t.error_count), ' 题')                            errCount,
               t.test_end_time - t.test_start_time                                  useTime,
               t.point                                                              score,
               t.study_model                                                        isWrite
        from test_record t
                 LEFT JOIN course c on t.course_id = c.id
                 LEFT JOIN unit u on t.unit_id = u.id
                 LEFT JOIN student s on s.id = t.student_id
        where t.id = #{testId}
          and s.id = #{stuId}
    </select>

    <select id="selectTestRecordInfo" resultType="com.zhidejiaoyu.common.pojo.TestRecordInfo" parameterType="map">
        select selected,
               if(locate('&lt;', if(locate('>', word) > 0, replace(word, '>', ')'),
                                    word)),
                  replace(if(locate('>', word) > 0, replace(word, '>', ')'), word),
                          '&lt;', '('),
                  word)     word,
               if(locate('&lt;', if(locate('>', option_a) > 0, replace(option_a, '>', ')'),
                                    option_a)),
                  replace(if(locate('>', option_a) > 0, replace(option_a, '>', ')'), option_a),
                          '&lt;', '('),
                  option_a) optionA,
               if(locate('&lt;', if(locate('>', option_b) > 0, replace(option_b, '>', ')'),
                                    option_b)),
                  replace(if(locate('>', option_b) > 0, replace(option_b, '>', ')'), option_b),
                          '&lt;', '('),
                  option_b) optionB,
               if(locate('&lt;', if(locate('>', option_c) > 0, replace(option_c, '>', ')'),
                                    option_c)),
                  replace(if(locate('>', option_c) > 0, replace(option_c, '>', ')'), option_c),
                          '&lt;', '('),
                  option_c) optionC,
               if(locate('&lt;', if(locate('>', option_d) > 0, replace(option_d, '>', ')'),
                                    option_d)),
                  replace(if(locate('>', option_d) > 0, replace(option_d, '>', ')'), option_d),
                          '&lt;', '('),
                  option_d) optionD,
               if(locate('&lt;', if(locate('>', answer) > 0, replace(answer, '>', ')'),
                                    answer)),
                  replace(if(locate('>', answer) > 0, replace(answer, '>', ')'), option_d),
                          '&lt;', '('),
                  answer)   answer
        from test_record_info t
        where t.test_id = #{testId}
    </select>
    <select id="selectUnitTestMaxPointMapByUnitIds" resultType="java.util.Map" parameterType="map">
        select unit_id unitId, max(point) point
        from test_record
        where unit_id in (
        <foreach collection="unitIds" item="unitId" separator=",">
            #{unitId}
        </foreach>
        )
        and student_id = #{studentId}
        AND study_model = #{modelName}
        group by unit_id
    </select>
    <select id="selectPrePoint" resultType="java.lang.Integer" parameterType="map">
        select point
        from test_record
        where student_id = #{studentId}
        order by id desc
        limit 1,1
    </select>
</mapper>
