<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zhidejiaoyu.common.mapper.CourseNewMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.zhidejiaoyu.common.pojo.CourseNew">
        <id column="id" property="id"/>
        <result column="study_paragraph" property="studyParagraph"/>
        <result column="grade" property="grade"/>
        <result column="version" property="version"/>
        <result column="label" property="label"/>
        <result column="grade_ext" property="gradeExt"/>
        <result column="picture_url" property="pictureUrl"/>
        <result column="course_name" property="courseName"/>
        <result column="label_ext" property="labelExt"/>
        <result column="status" property="status"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
        <result column="delStatus" property="delStatus"/>
    </resultMap>

    <sql id="base_sql">
        id, study_paragraph, grade, version, label, grade_ext, picture_url, course_name, label_ext, `status`, create_time, update_time, delStatus
    </sql>

    <sql id="more_table_sql">
        cn.id, cn.study_paragraph, cn.grade, cn.version, cn.label, cn.grade_ext, cn.picture_url, cn.course_name,
        cn.label_ext, cn.status, cn.create_time, cn.update_time, cn.delStatus
    </sql>

    <select id="selectGradeByCourseId" resultType="string" parameterType="map">
        select if(grade_ext = null or grade_ext = '', grade_ext, grade)
        from course_new
        where id = #{courseId}
    </select>
    <select id="selectPhaseByUnitId" resultType="java.lang.String" parameterType="map">
        select c.study_paragraph
        from course_new c
                 left join unit_new u
                           on u.course_id = c.id
                               and u.id = #{unitId}
        limit 1
    </select>

    <select id="selectPhaseById" parameterType="map" resultType="string">
        select study_paragraph
        from course_new
        where id = #{courseId}
    </select>
    <select id="selectGradeAndLabelByUnitIds"
            resultType="com.zhidejiaoyu.common.dto.testbeforestudy.GradeAndUnitIdDTO" parameterType="map">
        select c.grade, u.id unitId, c.grade_ext gradeExt, c.label, c.label_ext
        from course_new c
        left join unit_new u on c.id = u.course_id and u.id in (
        <foreach collection="unitIds" item="unitId" separator=",">
            #{unitId}
        </foreach>
        )
    </select>
    <select id="countUnitByIds" resultType="java.util.Map" parameterType="map">
        select c.id courseId, count(distinct u.id) count
        from course_new c
        join unit_new u on c.id = u.course_id
        <!--含有单词的课程-->
        <if test="type == 1">
            join unit_vocabulary_new uvn on uvn.unit_id = u.id
        </if>
        <!--含有句型的课程-->
        <if test="type == 2">
            join unit_sentence_new uvn on uvn.unit_id = u.id
        </if>

        <!--含有课文的课程-->
        <if test="type == 4">
            join unit_teks_new uvn on uvn.unit_id = u.id
        </if>
        /*含有金币试卷的课程*/
        <if test="type == 5">
            unit_test_store uts on uts.unit_id = u.id
        </if>
        and c.id in (
        <foreach collection="courseIds" separator="," item="courseId">
            #{courseId}
        </foreach>
        )
        group by course_id
    </select>
    <select id="selectByUnitId" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="more_table_sql"/>
        from course_new cn
        join unit_new un on cn.id = un.course_id and un.id = #{unitId}
        limit 1
    </select>
    <select id="selectByGradeListAndVersionAndGrade" resultType="java.lang.Long" parameterType="map">
        select distinct(c.id)
        from course_new c
        where c.version = #{version}
        and c.grade in (
        <foreach collection="smallGradeList" item="grade" separator=",">
            #{grade}
        </foreach>)
    </select>
    <select id="selectByIds" resultMap="BaseResultMap" parameterType="map">
        select
        <include refid="base_sql"/>
        from course_new where id in (
        <foreach collection="courseIds" item="id" separator=",">
            #{id}
        </foreach>
        )
        group by version
        order by id
    </select>


</mapper>
